#!/usr/bin/ruby

class GitNum
  class << self
    def parse_args(args)
      case args[0]
      when nil
        print status
      when 'convert'
        print convert(args.drop(1))
      when '-h', '--help', 'help'
        puts help
      else
        `git #{args[0]} #{convert(args.drop(1))}`
      end
    end

    private

    def status
      indexes = filenames_by_index.invert

      git_status.gsub(/(\t)(\e\[[0-9]+m)(.+:\s+)?(.+)(\e\[m)/) do
        tab, start_color, description, filenames, end_color = $1, $2, $3, $4, $5

        filenames = filenames.split(' -> ').map do |filename|
          index = indexes[filename.gsub(/\A"|"\z/, '')] || '?'
          "[#{index}] #{filename}"
        end.join(' -> ')

        "#{tab}#{start_color}#{description}#{filenames}#{end_color}"
      end
    end

    def convert(indexes)
      filenames = filenames_by_index

      expanded_indexes = indexes.map do |index|
        if range = index.match(/([0-9]+)-([0-9]+)/)
          (range[1]..range[2]).to_a
        else
          index
        end
      end.flatten

      expanded_indexes.map do |index|
        filenames[index] ? "\"#{filenames[index]}\"" : index
      end.join(' ')
    end

    def filenames_by_index
      i = 0
      git_status_porcelain.split("\n").reduce({}) do |filenames, status_line|
        status_line[3..-1].split(' -> ').each do |filename|
          i += 1
          filenames[i.to_s] = filename.gsub(/\A"|"\z/, '')
        end
        filenames
      end
    end

    def git_status
      `git -c color.status=always status --long`
    end

    def git_status_porcelain
      `git status --porcelain`
    end

    def help
      bold = lambda { |str| "\033[1m#{str}\033[0m" }

      [
        bold.call('NAME: '),
        '  git-num - Quickly (un)stage files in Git using numbers',
        '',
        bold.call('USAGE:'),
        bold.call('  git num') + ' [git_cmd [index...] | ' + bold.call('convert') +' index... | ' + bold.call('-h') + ']',
        '',
        bold.call('EXAMPLES:'),
        '  git num                # show `git status` with git-num indexes',
        '  git num add 1-3 5      # call `git add` with files at indexes 1, 2, 3, 5',
        '  git num add README 2   # call `git add` with "README" and file at index 2',
        '  git num reset head 4   # call `git reset head` with file at index 4',
        '  git num checkout -- 4  # call `git checkout --` with file at index 4',
        '  git num convert 1-3    # write filenames at indexes 1, 2, 3 to STDOUT',
        '  git num -h             # show this help screen'
      ].join("\n")
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  GitNum.parse_args(ARGV)
end
