#!/usr/bin/ruby

require 'shellwords'

VERSION = 'master (post-2.0.1)'

class GitNum
  class << self
    def parse_args(args)
      case args[0]
      when nil
        print parse_status[:annotated_status]
      when 'convert'
        print convert(args.drop(1))
      when '-h', '--help', 'help'
        puts help
      when '-v', '--version', 'version'
        puts "git-num version #{VERSION}"
      else
        system("git #{args[0]} #{convert(args.drop(1))}")
      end
    end

    private

    def parse_status
      filenames_by_index = {}
      index = 0

      annotated_status = git_status.gsub(/(\t)(\e\[[0-9]+m)(.+:\s+)?(.+)(\e\[m)/) do
        tab, start_color, description, filenames, end_color = $1, $2, $3, $4, $5

        filenames = filenames.split(' -> ').map do |filename|
          index += 1
          filenames_by_index[index.to_s] = filename
          "[#{index}] #{filename}"
        end.join(' -> ')

        "#{tab}#{start_color}#{description}#{filenames}#{end_color}"
      end

      {
        annotated_status: annotated_status,
        filenames_by_index: filenames_by_index
      }
    end

    def convert(indexes)
      filenames_by_index = parse_status[:filenames_by_index]
      expanded_indexes = expand_index_ranges(indexes)

      expanded_indexes.map do |index|
        # Pass through any unrecognized indexes to support commands like
        # `git num add file1` and `git num add -A`
        filenames_by_index[index] ? filename_for_cmd(filenames_by_index[index]) : index
      end.join(' ')
    end

    def expand_index_ranges(indexes)
      indexes.map do |index|
        if range = index.match(/\A([0-9]+)-([0-9]+)\Z/)
          (range[1]..range[2]).to_a
        else
          index
        end
      end.flatten
    end

    def filename_for_cmd(filename)
      # If git quoted the filename, we don't need to escape it ourselves
      (filename =~ /\A".+"\z/) ? filename : Shellwords.escape(filename)
    end

    def help
      bold = lambda { |str| "\033[1m#{str}\033[0m" }

      [
        bold.call('NAME:'),
        '  git-num - Quickly reference files in Git using numbers',
        '',
        bold.call('USAGE:'),
        bold.call('  git num') << ' [git_cmd [index ...] | ' <<
            bold.call('convert') << ' [index ...] | ' <<
            bold.call('-h') << ' | ' << bold.call('-v') << ']',
        '',
        bold.call('EXAMPLES:'),
        '  git num                # show `git status` with git-num indexes',
        '  git num add 1-3 5      # call `git add` with files at indexes 1, 2, 3, 5',
        '  git num diff README 2  # call `git diff` with "README" and file at index 2',
        '  git num reset HEAD 4   # call `git reset HEAD` with file at index 4',
        '  git num checkout -- 4  # call `git checkout --` with file at index 4',
        '  git num convert 1-3    # write filenames at indexes 1, 2, 3 to STDOUT',
        '  git num -h             # show this help screen',
        '  git num -v             # show version'
      ].join("\n")
    end

    def git_status
      `git -c color.status=always -c status.short=false status`
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  GitNum.parse_args(ARGV)
end
